{
  "unpublishedCollection": {
    "name": "Format",
    "pageId": "Stocktake Report",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\n\tcreateQuantities: () => {\n\t\tif (GetStocktakeComparisons.data == null) {\n\t\t\tlet ret = []\n\t\t\treturn ret\n\t\t}\n\t\tvar ret = []\n\t\tfor (let i = 0; i < GetStocktakeComparisons.data.data.getStoctakeActualComparison.quantities.length; i ++) {\n\t\t\tlet line = GetStocktakeComparisons.data.data.getStoctakeActualComparison.quantities[i]\n\t\t\t\n\t\t\tlet owner = \"\"\n\t\t\tlet ownerId = \"\"\n\t\t\tif (line.owner != null) {\n\t\t\t\towner = line.owner.companyCode\n\t\t\t\townerId = line.owner.id\n\t\t\t}\n\t\t\tlet row = {\n\t\t\t\t\"Material\": line.material.code,\n\t\t\t\t\"Owner\": owner,\n\t\t\t\t\"OwnerId\": ownerId,\n\t\t\t\t\"Status\": line.status.code,\n\t\t\t\t\"Expected\": line.expected,\n\t\t\t\t\"Counted\": line.counted,\n\t\t\t\t\"Comment\": \"\"\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\t\n\t\tstoreValue(\"quantitiesTable\", ret)\n\t\treturn ret\n\t},\n\tcreateMissing: () => {\n\t\tif (GetStocktakeComparisons.data == null) {\n\t\t\tlet ret = []\n\t\t\treturn ret\n\t\t}\n\t\tvar ret = []\n\t\tfor (let i = 0; i < GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.missingSubLots.length ; i ++) {\n\t\t\tlet line = GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.missingSubLots[i]\n\t\t\tlet owner = \"\"\n\t\t\tif (line.owner != null) {\n\t\t\t\towner = line.owner.companyCode\n\t\t\t}\n\t\t\tlet row = {\n\t\t\t\t\"Serial\": line.materialSubLot.code,\n\t\t\t\t\"Material\": line.material.code,\n\t\t\t\t\"Owner\": owner,\n\t\t\t\t\"Status\": line.status.code,\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\tstoreValue(\"missingSerialsTable\", ret)\n\t\treturn ret\n\t},\n\tcreateUnexpected: () => {\n\t\tif (GetStocktakeComparisons.data == null) {\n\t\t\tlet ret = []\n\t\t\treturn ret\n\t\t}\n\t\tvar ret = []\n\t\tfor (let i = 0; i < GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.unexpectedSubLots.length ; i ++) {\n\t\t\tlet line = GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.unexpectedSubLots[i]\n\t\t\tlet owner = \"\"\n\t\t\tlet ownerId = \"\"\n\t\t\tif (line.owner != null) {\n\t\t\t\towner = line.owner.companyCode\n\t\t\t\townerId = line.owner.id\n\t\t\t}\n\t\t\tlet row = {\n\t\t\t\t\"Serial\": line.materialSubLot.code,\n\t\t\t\t\"Material\": line.material.code,\n\t\t\t\t\"Owner\": owner,\n\t\t\t\t\"OwnerId\": ownerId,\n\t\t\t\t\"Status\": line.status.code,\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\tstoreValue(\"unexpectedSerialsTable\", ret)\n\t\treturn ret\n\t},\n\tcreateValid: () => {\n\t\tif (GetStocktakeComparisons.data == null) {\n\t\t\tlet ret = []\n\t\t\treturn ret\n\t\t}\n\t\tvar ret = []\n\t\tfor (let i = 0; i < GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.validSubLots.length ; i ++) {\n\t\t\tlet line = GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.validSubLots[i]\n\t\t\tlet owner = \"\"\n\t\t\tif (line.owner != null) {\n\t\t\t\towner = line.owner.companyCode\n\t\t\t}\n\t\t\tlet row = {\n\t\t\t\t\"Serial\": line.materialSubLot.code,\n\t\t\t\t\"Material\": line.material.code,\n\t\t\t\t\"Owner\": owner,\n\t\t\t\t\"Status\": line.status.code,\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\tstoreValue(\"validSerialsTable\", ret)\n\t\treturn ret\n\t},\n\tcreateErrored: () => {\n\t\tif (GetStocktakeComparisons.data == null) {\n\t\t\tlet ret = []\n\t\t\treturn ret\n\t\t}\n\t\tvar ret = []\n\t\tfor (let i = 0; i < GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.erroredSubLots.length ; i ++) {\n\t\t\tlet line = GetStocktakeComparisons.data.data.getStoctakeActualComparison.serialised.erroredSubLots[i]\n\t\t\t\n\t\t\tlet expectedOwner = \"\"\n\t\t\tlet countedOwner = \"\"\n\t\t\t\n\t\t\tif (line.expectedOwner.companyCode != null) {\n\t\t\t\texpectedOwner = line.expectedOwner.companyCode\n\t\t\t}\n\t\t\tif (line.countedOwner.companyCode != null) {\n\t\t\t\tcountedOwner = line.countedOwner.companyCode\n\t\t\t}\n\t\t\t\n\t\t\tlet row = {\n\t\t\t\t\"SerialNumber\": line.subLot.code,\n\t\t\t\t\"Material\": line.material.code,\n\t\t\t\t\"Error\": line.error,\n\t\t\t\t\"ExpectedLocation\": line.expectedLocation.name,\n\t\t\t\t\"ExpectedCarrier\": line.expectedCarrier.code,\n\t\t\t\t\"ExpectedStatus\": line.expectedStatus.code,\n\t\t\t\t\"CountedStatus\": line.countedStatus.code,\n\t\t\t\t\"ExpectedOwner\": expectedOwner,\n\t\t\t\t\"CountedOwner\": countedOwner,\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\tstoreValue(\"erroredSerialsTable\", ret)\n\t\treturn ret\n\t},\n\tmissingSubLotStocktakeStateTable: () => {\n\t\tvar ret = []\n\t\tif (GetMissingSubLotStocktake.data == null) {\n\t\t\treturn ret\n\t\t}\n\t\tif (GetMissingSubLotStocktake.data.data.getStocktakeCount == null) {\n\t\t\treturn ret\n\t\t}\n\t\tfor (let i = 0; i < GetMissingSubLotStocktake.data.data.getStocktakeCount.length; i++) {\n\t\t\tvar line = GetMissingSubLotStocktake.data.data.getStocktakeCount[i]\n\t\t\tlet row = {\n\t\t\t\t\"Location\": line.storageLocation.name,\n\t\t\t\t\"Carrier\": line.carrier.code,\n\t\t\t\t\"Status\": line.status.code\n\t\t\t}\n\t\t\tif (line.owner != null) {\n\t\t\t\trow[\"Owner\"] = line.owner.companyCode\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\treturn ret\n\t\t\t\n\t\t\t\n\t},\n\t\n\tstocktakeAdjustmentInput: () => {\n\t\tlet ret = []\n\t\tlet table = appsmith.store.quantitiesTable\n\t\tfor (let i = 0; i < table.length; i ++) {\n\t\t\t\n\t\t\tif (table[i].Owner == \"\") {\n\t\t\t\tlet line = {\n\t\t\t\t\t\"material\": {\"code\": table[i].Material},\n\t\t\t\t\t\"status\": {\"code\": table[i].Status},\n\t\t\t\t\t\"jobResponse\": {\"id\": HandleJobResponses.activeJobResponse()},\n\t\t\t\t\t\"quantity\": table[i].AdjustmentQuantity,\n\t\t\t\t\t\"user\": {\"id\": GetUserSites.data.data.getUser.id}\n\t\t\t\t}\n\t\t\t\tret.push(line)\n\t\t\t} else {\n\t\t\t\tlet line = {\n\t\t\t\t\t\"material\": {\"code\": table[i].Material},\n\t\t\t\t\t\"status\": {\"code\": table[i].Status},\n\t\t\t\t\t\"jobResponse\": {\"id\": HandleJobResponses.activeJobResponse()},\n\t\t\t\t\t\"quantity\": table[i].AdjustmentQuantity,\n\t\t\t\t\t\"owner\": {\"id\": table[i].OwnerId},\n\t\t\t\t\t\"user\": {\"id\": GetUserSites.data.data.getUser.id}\n\t\t\t\t}\n\t\t\t\tret.push(line)\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn ret\n\t},\n\tstocktakeAdjustmentUnexpectedInput: () => {\n\t\tlet ret = []\n\t\tlet table = appsmith.store.unexpectedSerialsTable\n\t\tlet row = table[tableUnexpectedSerials.selectedRowIndex] \n\t\t\t\n\t\tif (row.Owner == \"\" || row.Owner == null) {\n\t\t\tlet line = {\n\t\t\t\t\"material\": {\"code\": row.Material},\n\t\t\t\t\"status\": {\"code\": row.Status},\n\t\t\t\t\"jobResponse\": {\"id\": HandleJobResponses.activeJobResponse()},\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"user\": {\"id\": GetUserSites.data.data.getUser.id},\n\t\t\t\t\"materialSubLot\": {\"code\": row.Serial}\n\t\t\t}\n\t\t\tret.push(line)\n\t\t} else {\n\t\t\tlet line = {\n\t\t\t\t\"material\": {\"code\": row.Material},\n\t\t\t\t\"status\": {\"code\": row.Status},\n\t\t\t\t\"jobResponse\": {\"id\": HandleJobResponses.activeJobResponse()},\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"owner\": {\"id\": row.OwnerId},\n\t\t\t\t\"user\": {\"id\": GetUserSites.data.data.getUser.id},\n\t\t\t\t\"materialSubLot\": {\"code\": row.Serial}\n\t\t\t}\n\t\t\tret.push(line)\n\t\t\t\n\t\t}\n\t\treturn ret\n\t},\n\tsiteSelectDefault: () => {\n\t\tif (appsmith.URL.queryParams.Site != null){\n\t\t\treturn appsmith.URL.queryParams.Site\n\t\t}\n\t\treturn \"\"\n\t},\n\twarehouseSelectDefault: () => {\n\t\tif (appsmith.URL.queryParams.Warehouse != null){\n\t\t\treturn appsmith.URL.queryParams.Warehouse\n\t\t}\n\t\treturn \"\"\n\t},\n\tbinSelectDefault: () => {\n\t\tif (appsmith.URL.queryParams.Location != null){\n\t\t\tlet text = appsmith.URL.queryParams.Location.split(\": \")\n\t\t\treturn text[0]\n\t\t}\n\t\treturn \"\"\n\t},\n\tcarrierSelectDefault: () => {\n\t\tif (appsmith.URL.queryParams.Location != null){\n\t\t\tlet text = appsmith.URL.queryParams.Location.split(\": \")\n\t\t\tif (text[1] == \"no carrier\") {\n\t\t\t\treturn \"\"\n\t\t\t} else {\n\t\t\t\treturn text[1]\n\t\t\t}\n\t\t}\n\t\treturn \"\"\n\t}\n\t\n}",
    "variables": []
  },
  "id": "Stocktake Report_Format",
  "deleted": false,
  "gitSyncId": "618b5832da7cd651ee2730f2_628b333d7901344ba8d1b85d"
}